<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yuan.li]]></title>
  <link href="http://yuan.li/atom.xml" rel="self"/>
  <link href="http://yuan.li/"/>
  <updated>2014-06-26T21:56:32+08:00</updated>
  <id>http://yuan.li/</id>
  <author>
    <name><![CDATA[Yuan Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[移动端游戏的一些特点]]></title>
    <link href="http://yuan.li/blog/2013/04/01/yi-dong-duan-you-xi-yu-pcduan-you-xi-de-%5B%3F%5D-xie-qu-bie/"/>
    <updated>2013-04-01T13:20:00+08:00</updated>
    <id>http://yuan.li/blog/2013/04/01/yi-dong-duan-you-xi-yu-pcduan-you-xi-de-[?]-xie-qu-bie</id>
    <content type="html"><![CDATA[<p><img src="http://supercell-www-content.s3-website-us-east-1.amazonaws.com/prod/cache/images/made/ef7adfcd196a637e/clash_of_clans_1440_727_c1.jpg"></p>

<p>这两天玩了一下<a href="https://itunes.apple.com/us/app/clash-of-clans/id529479190?mt=8">clash of clans</a>这个游戏，让我对移动游戏的模式、玩法又有了一些新的认识，整理如下：</p>

<h2>1. 无下线</h2>

<p>由于移动设备的天然属性，使得移动端网络游戏可以抛弃上线、下线的概念，而做到7*24小时在线。COC和Letterpress都很好的践行了这种理念。这大大的突破了游戏原有的局限，甚至可以将游戏融入到人们的日常生活之中，随时、随地，只要无聊，想要找乐子，就能马上开始。我相信未来，这种模式还能做出更多让人惊喜的游戏。</p>

<h2>2. 细粒度</h2>

<p>由于使用移动端的场景大多都是碎片时间，导致了移动端游戏必须抛弃PC端游戏的那种长时间、深沉浸的游戏方式。可以试想，在移动端玩一个需要半个多小时才能完成一个任务的游戏，是多么让人抓狂。移动端更多需要的是回合、异步、迅速进入主题的游戏方式。</p>

<h2>3. 操作</h2>

<p>无论iOS还是Android，移动端大多都是以触屏为主，因此，很难将一些需要精确定位技巧的元素加入到游戏之中。比方说，类似CS、SC这些要求精确定位操作的游戏，在移动端就很难具有实际操作性。那么，如何在操作层面增添游戏的娱乐性呢？
- 通过精确的节奏点击。移动端点击精确的位置很难，但是点击精确的时间却非常容易。Tiny Wings就是很好的例子；
- 增加经过更多的思考而做出的操作。为什么做出更多思考的操作容易给人带来快感，这我不清楚，但我自身的确享受到了更多思考而带来的快乐。这或许能解释，移动端策略类游戏大热的原因。</p>

<h2>4. 可爱画风</h2>

<p>由于移动端的用户群体更广，因此可爱的画风，无疑是通杀最广泛用户群的利器。</p>

<h2>5. 强烈的归属感</h2>

<p>每个人都希望拥有自己的一片家园，这个游戏恰恰满足了我的「家园欲望」。每天看着自己的clan在自己的经营下，一点点变大、变强，仿佛这里就成了自己的另外一个家。</p>

<ol>
<li>明确的目标
在基本学会游戏的玩法后，游戏给出了一个难度不大不小的一个目标&#8212;-赢取1250个奖杯，即可</li>
</ol>


<p>暂时想到的就这么多，以后也会慢慢补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从一个错题本想到的]]></title>
    <link href="http://yuan.li/blog/2013/02/21/cong-%5B%3F%5D-ge-cuo-ti-ben-xiang-dao-de/"/>
    <updated>2013-02-21T23:59:00+08:00</updated>
    <id>http://yuan.li/blog/2013/02/21/cong-[?]-ge-cuo-ti-ben-xiang-dao-de</id>
    <content type="html"><![CDATA[<p>过年回家的时候，无意间看到了自己当年高中时的错题本，里面密密麻麻的记录了自己做错的题目。记得每次考试之前，都会翻开这个本子看看，用以告诫自己：聪明的人绝不在同一个地方跌倒两次。</p>

<p>转眼六年多过去了，那时使用的「小灵通」也早都变成了iPhone，可或许现在的高中生，还有很多人在使用着「错题本」这种原始的方式来学习。不对，我们的学习不应该是我记忆中的样子，这样太低效、太混乱、太让人抓狂了！如果让我回到高中，我希望我的生活是：</p>

<ul>
<li>晚上放学时，老师把今天的作业都已经布置到了我的平板电脑的「作业」app里，内容是一张数学卷子和一张物理卷子。「作业」那个app的icon的右上角出现了一个让人躁动不安的数字：2；</li>
<li>开始万恶的写作业了！！！打开平板电脑，选择题和填空题都可以直接通过触摸屏来完成，计算题我则只需要将解题步骤写在学校发的带有锚点的答题纸上，通过摄像头就可以直接清晰的扫描进平板电脑中；</li>
<li>当我完成作业时，我的作业就已经通过网络传到了老师的电脑中，计算机已经自动帮老师把选择题和填空题批改完毕；</li>
<li>当我完成作业的同时，平板电脑悄悄的记录下了我做每一道题所花费的时间；</li>
<li>呼~作业写完了。似乎时间还早，于是我想对自己的薄弱学科再多学一点：我通过「学习管理」app明确的看到了我各个学科的分数走势、各个知识点的掌握情况以及经常出错的题目类型，我发现最近英语阅读的准确率有所降低，于是我选择了「英语阅读强化训练」，这样，我的平板电脑会在未来的半个月时间内，为我每天多准备两篇阅读理解。另外，我发现今天化学老师讲的东西我还有些不明白，于是我找了一位化学名师的视频课程重新看了下；</li>
<li>我的作业、练习、考试的所有数据都上传到了学校的服务器上，并且通过平板电脑都可以轻松浏览。想要整理出一份最近3个月关于物理电学的错题集对我来说，简直就是小事一桩；</li>
<li>第二天早上上学，书包很轻，里面只装了一个平板电脑，几只笔和几张草稿纸。教科书早都已经在开学「发书」的时候，下载到了我的平板电脑里了！</li>
<li>最后，或许高考填写志愿的时候，我仍然可以打开我的平板，里面已经根据我的实际水平和往年的录取线，为我推荐了几所我可能心仪并且实际的大学了。。。</li>
</ul>


<p>YY了半天，仔细想想，其实实现这些都不难——唯一难的——还是人的心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用git进行iOS开发的一些实践经验]]></title>
    <link href="http://yuan.li/blog/2013/02/04/shi-yong-gitjin-xing-ioskai-fa-de-%5B%3F%5D-xie-shi-jian-jing-yan/"/>
    <updated>2013-02-04T01:01:00+08:00</updated>
    <id>http://yuan.li/blog/2013/02/04/shi-yong-gitjin-xing-ioskai-fa-de-[?]-xie-shi-jian-jing-yan</id>
    <content type="html"><![CDATA[<p>使用git做为版本控制系统（VCS）来开发iOS程序也差不多有一年的时间了。使用的过程中，发现git真的是一个非常优秀的程序员工具，使用起来优雅、快捷、高效。下面就分享一些我的使用经验。</p>

<h3>一、基本环境</h3>

<p>iOS开发人员为两人，设置的有一个bare的中心服务器用于备份及代码同步。当然，git也支持两台开发机之间的直接通信，之所以还要设置中心服务器，更多的是出于方便在家办公的考虑。与中心服务器通信时，我们也遵循先pull后push的原则，确保将冲突解决后，再push给中心服务器。</p>

<h3>二、分支策略</h3>

<p>git提供了非常先进便捷的分支操作管理功能。我们开发的过程中，主要参考了<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">阮一峰的这篇文章</a>，设计了两个常驻分支：master与dev。master分支负责管理大的发布版本号，dev分支则是日常开发使用的分支。在需要进行一些bug fix或者新功能实验时，会从dev分支下checkout出一个新的分支进行开发，解决bug或完成新功能后，会merge回dev分支。如我们在开发<a href="https://itunes.apple.com/us/app/re-men-shi-pin-wang-shang/id527800185?mt=8">热门视频</a>的时候，需要实验录音评论的功能，就另外开了一个dev_record的分支进行开发，经过一段时间的开发，发现这个功能的效果还不错，就merge回了dev分支，最后merge到master分支进行了发布。在实验新功能的过程中，依然可以在dev分支下进行一些日常的bug fix以及页面调整等工作。通过分支来进行代码隔离，逻辑上清晰，使用也很方便。</p>

<h3>三、冲突解决</h3>

<p>由于Xcode自动整合了git，因此在出现代码冲突时，可以非常方便的找到发生冲突的文件以及发生冲突的位置。另外，.xcodeproj也会经常发生冲突，通常情况，运行以下这个脚本就能解决.xcodeproj文件的冲突：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">projectfile</span><span class="o">=</span><span class="sb">`</span>find -d . -name <span class="s1">&#39;project.pbxproj&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="nv">projectdir</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> *.xcodeproj<span class="sb">`</span>
</span><span class='line'><span class="nv">projectfile</span><span class="o">=</span><span class="s2">&quot;${projectdir}/project.pbxproj&quot;</span>
</span><span class='line'><span class="nv">tempfile</span><span class="o">=</span><span class="s2">&quot;${projectdir}/project.pbxproj.out&quot;</span>
</span><span class='line'><span class="nv">savefile</span><span class="o">=</span><span class="s2">&quot;${projectdir}/project.pbxproj.mergesave&quot;</span>
</span><span class='line'>
</span><span class='line'>cat <span class="nv">$projectfile</span> | grep -v <span class="s2">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD&quot;</span> | grep -v <span class="s2">&quot;=======&quot;</span> | grep -v <span class="s2">&quot;^&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;</span> &gt; <span class="nv">$tempfile</span>
</span><span class='line'>cp <span class="nv">$projectfile</span> <span class="nv">$savefile</span>
</span><span class='line'>mv <span class="nv">$tempfile</span> <span class="nv">$projectfile</span>
</span></code></pre></td></tr></table></div></figure>


<p>原理很简单，但是的确很实用。</p>

<h3>四、其他的一些小tips</h3>

<p>尽管<code>git config</code>可以提供别名的支持，但是对于我这种懒人来说，这些命令还是太长了。因此，我在<code>~/.bashrc</code>下重新定义了几个关于git的别名：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#=========git==========</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gs</span><span class="o">=</span><span class="s1">&#39; git status -s&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">ga</span><span class="o">=</span><span class="s1">&#39;git add&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gco</span><span class="o">=</span><span class="s1">&#39;git checkout&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gb</span><span class="o">=</span><span class="s1">&#39;git branch&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gl</span><span class="o">=</span><span class="s1">&#39;git log --all --decorate --graph --color&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>.gitignore文件：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Xcode</span>
</span><span class='line'>.DS_Store
</span><span class='line'>build/
</span><span class='line'>*.pbxuser
</span><span class='line'>!default.pbxuser
</span><span class='line'>*.mode1v3
</span><span class='line'>!default.mode1v3
</span><span class='line'>*.mode2v3
</span><span class='line'>!default.mode2v3
</span><span class='line'>*.perspectivev3
</span><span class='line'>!default.perspectivev3
</span><span class='line'>*.xcworkspace
</span><span class='line'>!default.xcworkspace
</span><span class='line'>xcuserdata
</span><span class='line'>profile
</span><span class='line'>*.moved-aside
</span><span class='line'>DerivedData
</span><span class='line'>.idea/
</span></code></pre></td></tr></table></div></figure>


<p>最后，分享一个很好的中文git的<a href="http://gitbook.liuhui998.com/1_1.html">教程</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Facebook-like activity indicator for iOS]]></title>
    <link href="http://yuan.li/blog/2013/01/29/facebook-like-activity-indicator-for-ios/"/>
    <updated>2013-01-29T16:43:00+08:00</updated>
    <id>http://yuan.li/blog/2013/01/29/facebook-like-activity-indicator-for-ios</id>
    <content type="html"><![CDATA[<p>前几天做了一个关于星际2的<a href="https://itunes.apple.com/cn/app/you-xi-jie-shuo-shi-pin-xing/id596678901?ls=1&amp;mt=8">视频App</a>，设计非常棒，已经提交了审核，预计很快就要上线了。项目中设计了一个自定义的loading view。等做好了以后，总感觉特眼熟，但就是想不起在哪儿见过。后来，才发现原来是facebook的loading gif（汗，又是拜GFW所赐）。索性把它的颜色调成了facebook的配色，就把它放到了github上了： <a href="https://github.com/yuanlizbyy/YLActivityIndicatorView">YLActivityIndicatorView</a>，它是基于Core Graphics的，还算比较高效，并且把绘制进程放到了NSRunLoopCommonModes下，因此当产生交互的时候，动画依然不会被阻塞哟：P</p>

<p>效果如下图：</p>

<p><img src="https://raw.github.com/yuanlizbyy/YLActivityIndicatorView/master/facebook_loading.gif"></p>

<p>另外，跳跃的速度、view的尺寸、小点的个数都是可以通过代码直接配置的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013, Hello World!]]></title>
    <link href="http://yuan.li/blog/2013/01/01/hello-world/"/>
    <updated>2013-01-01T02:02:00+08:00</updated>
    <id>http://yuan.li/blog/2013/01/01/hello-world</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
